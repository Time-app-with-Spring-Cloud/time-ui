# Unlike the Eureka server, we do want to register this service
eureka.client.register-with-eureka=true

# We also want to get a copy of the registry to cache
eureka.client.fetch-registry=true

# Generate unique id, just in case we need multiple instances of this service
eureka.instance.instance-id=${spring.application.name}:${random.int}

# Open the actuator endpoint with information about the Hystrix circuit breakers
management.endpoints.web.exposure.include=hystrix.stream

# Configuration of the RabbitMQ instance
spring.rabbitmq.host=localhost
spring.rabbitmq.host.port=5672
spring.rabbitmq.host.username=guest
spring.rabbitmq.host.password=guest

# This way we connect producer with consumer. "output" is the name of the channel (see annotation in TimeMessageConsumer)
spring.cloud.stream.bindings.output.destination=time